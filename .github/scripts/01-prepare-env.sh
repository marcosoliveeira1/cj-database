#!/bin/bash
set -e # Exit script immediately if any command fails

echo "--- Running: 01-prepare-env.sh ---"

# --- Configuration Variables (Expects these to be exported by the caller) ---
# Required: APP_DIR, EC2_USERNAME, REPO_NAME, MARKER_FILE, ENV_FILE, TRAEFIK_DATA_DIR
# Required Secrets (used for .env): APP_DOMAIN, APP_EMAIL, APP_PORT, DB_NAME, DB_USER, DB_PASSWORD, DB_ROOT_PASSWORD, TRAEFIK_AUTH_USER_PASS, PIPEDRIVE_WEBHOOK_USER, PIPEDRIVE_WEBHOOK_PASSWORD

echo "--- 1. Preparing Deployment Directory ---"
mkdir -p "$APP_DIR"
mkdir -p "$TRAEFIK_DATA_DIR" # Ensure Traefik data directory exists
# Create acme.json with strict permissions if it doesn't exist
if [ ! -f "$TRAEFIK_DATA_DIR/acme.json" ]; then
  echo "Creating initial acme.json with 600 permissions..."
  touch "$TRAEFIK_DATA_DIR/acme.json"
  chmod 600 "$TRAEFIK_DATA_DIR/acme.json"
fi
cd "$APP_DIR" || exit 1

echo "--- 2. Updating Code ---"
# Check if repo exists, pull changes; otherwise, clone it
if [ -d ".git" ] ; then
  echo "Git repository exists, pulling changes from origin main..."
  git fetch origin main
  git reset --hard origin/main # Overwrite local changes
else
  echo "Cloning repository: $REPO_NAME..."
  # Backup existing env if needed
  [ -f "$ENV_FILE" ] && mv "$ENV_FILE" "$APP_DIR/../.env.backup.$(date +%s)" && echo "Backed up existing .env" || true
  # Clone using SSH (requires deploy key setup)
  git clone "git@github.com:$REPO_NAME.git" .
  # Restore backup env if it exists
  BACKUP_ENV=$(ls -t "$APP_DIR"/../.env.backup.* 2>/dev/null | head -n 1)
  [ -f "$BACKUP_ENV" ] && mv "$BACKUP_ENV" "$ENV_FILE" && echo "Restored backed up .env" || true
fi

echo "--- 3. Determining Blue/Green Deployment Colors ---"
if [ ! -f "$MARKER_FILE" ]; then
  echo "blue" > "$MARKER_FILE"
fi
ACTIVE_COLOR=$(cat "$MARKER_FILE")

if [ "$ACTIVE_COLOR" == "blue" ]; then
  INACTIVE_COLOR="green"
  ACTIVE_PRIORITY=10
  INACTIVE_PRIORITY=5
else
  INACTIVE_COLOR="blue"
  ACTIVE_PRIORITY=10
  INACTIVE_PRIORITY=5
fi

# Export colors for subsequent scripts (these will be available in the SSH session)
export ACTIVE_COLOR
export INACTIVE_COLOR
export ACTIVE_PRIORITY
export INACTIVE_PRIORITY

echo "Current Active Color: $ACTIVE_COLOR (Priority: $ACTIVE_PRIORITY)"
echo "Deploying New Version To Inactive Color: $INACTIVE_COLOR (Priority: $INACTIVE_PRIORITY)"
# Store the inactive color in a temp file for the main workflow script if needed outside this script
echo "$INACTIVE_COLOR" > /tmp/inactive_color.txt
echo "$ACTIVE_COLOR" > /tmp/active_color.txt # Also store active color

echo "--- 4. Creating/Updating .env file ---"
echo "# Auto-generated by GitHub Actions $(date)" > "$ENV_FILE"
echo "APP_DOMAIN=$APP_DOMAIN" >> "$ENV_FILE"
echo "APP_EMAIL=$APP_EMAIL" >> "$ENV_FILE"
echo "APP_PORT=$APP_PORT" >> "$ENV_FILE"
echo "DB_HOST=db" >> "$ENV_FILE"
echo "DB_PORT=3306" >> "$ENV_FILE"
echo "DB_NAME=$DB_NAME" >> "$ENV_FILE"
echo "DB_USER=$DB_USER" >> "$ENV_FILE"
echo "DB_PASSWORD=$DB_PASSWORD" >> "$ENV_FILE"
echo "DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD" >> "$ENV_FILE"
echo "DATABASE_URL=mysql://$DB_USER:$DB_PASSWORD@db:3306/$DB_NAME" >> "$ENV_FILE"
echo "NODE_ENV=production" >> "$ENV_FILE"
echo "TRAEFIK_AUTH_USER_PASS=$TRAEFIK_AUTH_USER_PASS" >> "$ENV_FILE"
echo "PIPEDRIVE_WEBHOOK_USER=$PIPEDRIVE_WEBHOOK_USER" >> "$ENV_FILE"
echo "PIPEDRIVE_WEBHOOK_PASSWORD=$PIPEDRIVE_WEBHOOK_PASSWORD" >> "$ENV_FILE"

# Set initial priorities in .env based on the CURRENT active color
if [ "$ACTIVE_COLOR" == "blue" ]; then
  echo "BLUE_PRIORITY=$ACTIVE_PRIORITY" >> "$ENV_FILE"
  echo "GREEN_PRIORITY=$INACTIVE_PRIORITY" >> "$ENV_FILE"
else
  echo "BLUE_PRIORITY=$INACTIVE_PRIORITY" >> "$ENV_FILE"
  echo "GREEN_PRIORITY=$ACTIVE_PRIORITY" >> "$ENV_FILE"
fi
echo "Generated .env file with initial priorities."

echo "--- Finished: 01-prepare-env.sh ---"