name: Deploy Blue/Green to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code on Runner
      uses: actions/checkout@v3

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e # Exit main script block on failure

          # --- Define Core Variables ---
          export APP_DIR="/home/${{ secrets.EC2_USERNAME }}/app"
          export EC2_USERNAME="${{ secrets.EC2_USERNAME }}"
          export REPO_NAME="${{ github.repository }}"
          export ENV_FILE="$APP_DIR/.env"
          export COMPOSE_FILE="$APP_DIR/docker-compose.yml"
          export TRAEFIK_DATA_DIR="$APP_DIR/traefik-data"
          export MARKER_FILE="$APP_DIR/active_color.txt"

          # --- 1. Ensure Base Directory Exists ---
          # This needs to happen before cloning/pulling into it
          echo "--- Ensuring deployment directory exists: $APP_DIR ---"
          mkdir -p "$APP_DIR"
          cd "$APP_DIR" || exit 1 # Change directory *before* git operations

          # --- 2. Update Code on EC2 Instance ---
          # This block is moved from 01-prepare-env.sh
          echo "--- Updating Code ---"
          if [ -d ".git" ] ; then
            echo "Git repository exists, pulling changes from origin main..."
            # Optional: Stash local changes like .env if they aren't gitignored
            # git stash push -- $ENV_FILE || true
            git fetch origin main
            git reset --hard origin/main # Overwrite local changes
            # Optional: Restore stashed files
            # git stash pop || true
          else
            echo "Cloning repository: $REPO_NAME..."
            # Backup existing env if needed before clone potentially wipes directory
            [ -f "$ENV_FILE" ] && mv "$ENV_FILE" "$APP_DIR/../.env.backup.$(date +%s)" && echo "Backed up existing .env" || true
            # Clone using SSH (ensure EC2 has SSH key access to GitHub repo)
            git clone "git@github.com:$REPO_NAME.git" .
            # Restore backup env if it exists
            BACKUP_ENV=$(ls -t "$APP_DIR"/../.env.backup.* 2>/dev/null | head -n 1)
            [ -f "$BACKUP_ENV" ] && mv "$BACKUP_ENV" "$ENV_FILE" && echo "Restored backed up .env" || true
          fi
          # --- Code is now present on EC2 in $APP_DIR ---

          # --- Define Path to Scripts (Now that code exists) ---
          # This must come *after* the git clone/pull
          export SCRIPT_DIR="$APP_DIR/.github/scripts"
          if [ ! -d "$SCRIPT_DIR" ]; then
              echo "ERROR: Script directory '$SCRIPT_DIR' not found after code update."
              ls -la "$APP_DIR" # List directory contents for debugging
              exit 1
          fi

          # --- Pass Secrets as Environment Variables for the scripts ---
          export APP_DOMAIN="${{ secrets.APP_DOMAIN }}"
          export APP_EMAIL="${{ secrets.APP_EMAIL }}"
          export APP_PORT="${{ secrets.APP_PORT }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
          export TRAEFIK_AUTH_USER_PASS="${{ secrets.TRAEFIK_AUTH_USER_PASS }}"
          export PIPEDRIVE_WEBHOOK_USER="${{ secrets.PIPEDRIVE_WEBHOOK_USER }}"
          export PIPEDRIVE_WEBHOOK_PASSWORD="${{ secrets.PIPEDRIVE_WEBHOOK_PASSWORD }}"
          export PIPEDRIVE_API_TOKEN="${{ secrets.PIPEDRIVE_API_TOKEN }}"
          export PIPEDRIVE_API_URL="${{ secrets.PIPEDRIVE_API_URL }}"
          export REDIS_URL="${{ secrets.REDIS_URL }}"
          export LOKI_URL="${{ secrets.LOKI_URL }}"
          export LOKI_USERNAME="${{ secrets.LOKI_USERNAME }}"
          export LOKI_PASSWORD="${{ secrets.LOKI_PASSWORD }}"

          # --- Run Prisma Migrate Deploy ---
          echo "--- Running Prisma Migration ---"
          echo "--- TODO: Run Prisma Migration ---"
          # cd "$APP_DIR" # Ensure we're in the app directory
          # npx prisma migrate deploy -y

          # --- Execute Deployment Steps Using Scripts ---
          echo "Executing 01-prepare-env.sh..."
          bash "$SCRIPT_DIR/01-prepare-env.sh"

          # Load the determined colors from the temp files created by the script
          export INACTIVE_COLOR=$(cat /tmp/inactive_color.txt)
          export ACTIVE_COLOR=$(cat /tmp/active_color.txt)
          # ACTIVE_PRIORITY and INACTIVE_PRIORITY were also exported within 01-prepare-env.sh

          echo "Executing 02-deploy-inactive.sh..."
          bash "$SCRIPT_DIR/02-deploy-inactive.sh"

          echo "Executing 03-switch-traffic.sh..."
          bash "$SCRIPT_DIR/03-switch-traffic.sh"

          echo "Executing 04-cleanup.sh (using previous active color: $ACTIVE_COLOR)..."
          bash "$SCRIPT_DIR/04-cleanup.sh"

          echo "--- Deployment Script Execution Completed ---"


    - name: Verify Deployment
      if: success()
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e # Exit verify script block on failure

          # --- Define Core Variables for Verification ---
          export APP_DIR="/home/${{ secrets.EC2_USERNAME }}/app"
          export MARKER_FILE="$APP_DIR/active_color.txt"
          export ENV_FILE="$APP_DIR/.env"
          export COMPOSE_FILE="$APP_DIR/docker-compose.yml"
          export APP_DOMAIN="${{ secrets.APP_DOMAIN }}"

          # --- Get Path to Scripts ---
          # Code should already exist from the previous step
          export SCRIPT_DIR="$APP_DIR/.github/scripts"
          if [ ! -d "$SCRIPT_DIR" ]; then
              echo "ERROR: Script directory '$SCRIPT_DIR' not found for verification."
              exit 1
          fi

          # --- Execute Verification Script ---
          echo "Executing verify-deployment.sh..."
          bash "$SCRIPT_DIR/verify-deployment.sh"

          echo "--- Verification Script Execution Completed ---"